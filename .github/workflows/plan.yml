name: Harness Plan

on:
  workflow_call:
    inputs:
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: null

      workdir_path:
        description: 'Specifies the working directory.'
        required: false
        type: string
        default: './'

    secrets:
      TF_VAR_HARNESS_ENDPOINT:
        description: 'HARNESS_ENDPOINT'
        required: true
      TF_VAR_HARNESS_ACCOUNT_ID:
        description: 'HARNESS_ACCOUNT_ID'
        required: true
      TF_VAR_HARNESS_PLATFORM_API_KEY:
        description: 'HARNESS_PLATFORM_API_KEY'
        required: true
      BACKEND_RG_NAME:
          description: 'BACKEND_STORAGE_RESOURCE_GROUP_NAME'
          required: true
      BACKEND_STORAGE_ACCOUNT:
          description: 'BACKEND_STORAGE_ACCOUNT_NAME'
          required: true   
      BACKEND_STORAGE_CONTAINER:
          description: 'BACKEND_STORAGE_CONTAINER_NAME'
          required: true
      BACKEND_STORAGE_KEYS:
            description: 'BACKEND_STORAGE_KEY'
            required: true   
      client_id:
            description: 'SPN_Client_ID'
            required: true   
      tenant_id:
            description: 'SPN_Tenant_ID'
            required: true  
      # AZURE_CREDENTIALS: 
      #       description: 'Azure Credentials'
      #       required: true    
        
  workflow_dispatch:

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    # environment:
    #     name: ${{ inputs.gh_environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: "1.9.4"
        
      - name: Get list of changed directories
        id: get-changed-dirs
        run: |
          CHANGED_DIRS=$(git diff --dirstat=files,0 HEAD^ HEAD | awk '{print $2}')
          LAST_CHANGED_DIR=$(echo "$CHANGED_DIRS" | tail -n 1)
          echo "Latest changed directory: $LAST_CHANGED_DIR"
          echo "::set-output name=dir::$LAST_CHANGED_DIR"
          
      # - name: Copy private key to download remote repo files
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.PRIVATEKEYS }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa

      # - name: Configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: "${{ secrets.AWS_REGION }}"
      #     role-to-assume: "${{ secrets.AWS_OIDC_ROLE_ARN_NONPROD }}"
      #     role-session-name: Terraform-Deployment
      
      - uses: azure/login@v1
        with:
         client-id: ${{ secrets.client_id }}
         tenant-id: ${{ secrets.tenant_id }}
         # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         allow-no-subscriptions: true

      # - uses: azure/login@v1
      #   with: 
      #      creds: ${{ secrets.AZURE_CREDENTIALS }}
     
      - name: Terraform Plan Pipelines
        # working-directory: 'pipelines/ecs'
        working-directory: 'harness-resources'
        # working-directory: ${{ inputs.workdir_path }}
        run: |
          echo "TF_VAR_HARNESS_ENDPOINT=${{ secrets.TF_VAR_HARNESS_ENDPOINT }}" >> $GITHUB_ENV
          echo "TF_VAR_HARNESS_ACCOUNT_ID=${{ secrets.TF_VAR_HARNESS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_HARNESS_PLATFORM_API_KEY=${{ secrets.TF_VAR_HARNESS_PLATFORM_API_KEY }}" >> $GITHUB_ENV
          terraform init -backend-config="resource_group_name==${{ secrets.BACKEND_RG_NAME }}" \
               -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
               -backend-config="container_name=${{ secrets.BACKEND_STORAGE_CONTAINER }}" \
               -backend-config="key=${{ secrets.BACKEND_STORAGE_KEYS }}"
          terraform plan -var="TF_VAR_HARNESS_ENDPOINT=${{ secrets.TF_VAR_HARNESS_ENDPOINT }}" -var="TF_VAR_HARNESS_ACCOUNT_ID=${{ secrets.TF_VAR_HARNESS_ACCOUNT_ID }}" -var="TF_VAR_HARNESS_PLATFORM_API_KEY=${{ secrets.TF_VAR_HARNESS_PLATFORM_API_KEY }}"
          # terraform init -backend-config="resource_group_name=Testvm_group" \
          #      -backend-config="storage_account_name=testvmgroupb7e2" \
          #      -backend-config="container_name=tfstate" \
          #      -backend-config="key=harness"
          # terraform plan -var="TF_VAR_HARNESS_ENDPOINT=${{ secrets.TF_VAR_HARNESS_ENDPOINT }}" -var="TF_VAR_HARNESS_ACCOUNT_ID=${{ secrets.TF_VAR_HARNESS_ACCOUNT_ID }}" -var="TF_VAR_HARNESS_PLATFORM_API_KEY=${{ secrets.TF_VAR_HARNESS_PLATFORM_API_KEY }}"
